package org.schoen.ben.euler;


/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 *
 *
 * @author <a href="mailto:benshoe@gmail.com">Ben Schoen</a>
 * @since Oct 4, 2014
 */
public class Opdracht8 implements IEulerProblem {

	private static final String thousandDigitNumber = "73167176531330624919225119674426574742355349194934969835203127"
		+ "7450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238"
		+ "6305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362"
		+ "7661428280644448664523874930358907296290491560440772390713810515859307960866701724271218839987979087922749"
		+ "2190169972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063"
		+ "2441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145"
		+ "3510047482166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245"
		+ "8617866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416589604080719"
		+ "8403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646"
		+ "710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

	private String m_answer;

	@Override
	public void run() {
		StringBuilder sb = new StringBuilder(thousandDigitNumber);

		StringBuilder solution = new StringBuilder(sb.substring(0, 13));
		StringBuilder solution2 = null;
		long sum = calculateProduct(solution);
		boolean finished = false;
		int startAt = 1;
		while(!finished) {
			String substring = sb.substring(startAt, startAt + 13);
			if(substring.contains("0")) {
				startAt += substring.lastIndexOf("0") + 1;
				finished = isOutOfBound(startAt);
				continue;
			}
			solution2 = new StringBuilder(substring);
			long sum2 = calculateProduct(solution2);
			if(sum2 > sum) {
				sum = sum2;
				solution = solution2;
			}
			startAt++;
			finished = isOutOfBound(startAt);
		}
		System.out.println(solution);
		long product = calculateProduct(solution);
		System.out.println("Het product is: " + product);
		m_answer = String.valueOf(product);
	}

	private boolean isOutOfBound(int startAt) {
		return startAt + 13 > 1000;
	}

	private long calculateProduct(StringBuilder solution) {
		long product = 1;
		for(int i = 0; i < solution.length(); i++) {
			product *= solution.charAt(i) - 48;
		}
		return product;
	}

	@Override
	public String getProblemName() {
		return "Problem 8: Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?";
	}

	@Override
	public boolean isCorrectAnswer() {
		return "23514624000".equals(m_answer);
	}
}
