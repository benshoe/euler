package org.schoen.ben.euler;


/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised;
 * what is the value of D?
 *
 *
 * @author <a href="mailto:ben.schoen@itris.nl">Ben Schoen</a>
 * @since Nov 8, 2014
 */
public class Problem044 extends AbstractEulerProblem {

	public Problem044(String answer) {
		super(answer);
	}

	@Override
	public void run() {
		long answer = 0;

		long[] pentagonalNumbers = new long[5000];
		for(long i = 1; i <= 5000L; i++) {
			pentagonalNumbers[(int) (i - 1)] = (long) (1.5 * Math.pow(i, 2) - 0.5 * i);
		}

		boolean found = false;
		int counter = 0;
		while(!found && counter < 5000) {
			for(int j = 0; j < pentagonalNumbers.length; j++) {
				if(found)
					break;
				for(int k = j; k < pentagonalNumbers.length; k++) {
					long add = pentagonalNumbers[j] + pentagonalNumbers[k];
					long subtract = pentagonalNumbers[k] - pentagonalNumbers[j];
					if(isPentagonalNumber(pentagonalNumbers, add)) {
						if(isPentagonalNumber(pentagonalNumbers, subtract)) {
							answer = subtract;
							found = true;
							break;
						}
					}
				}
			}
			counter++;
		}
		setAnswer(String.valueOf(answer));
	}

	private boolean isPentagonalNumber(long[] pentagonalNumbers, long number) {
		for(int i = 0; i < pentagonalNumbers.length; i++) {
			if(pentagonalNumbers[i] == number)
				return true;
		}
		return false;
	}

	@Override
	public String getProblemName() {
		return "Problem 44: Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal";
	}

}
